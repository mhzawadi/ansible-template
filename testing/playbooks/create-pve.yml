---
- name: Create
  hosts: localhost
  # connection: local
  gather_facts: false
  collections:
    - community.general
  vars:
    - node: proxmox
    - molecule_instance_config: "{{ top_dir }}/testing/instance_config.yml"
  vars_files:
    - "{{ lookup('env', 'PWD') }}/molecule/default/molecule.yml"
    - "{{ top_dir }}/proxmox-root.yml"
  pre_tasks:
    - name: Validate platform configurations
      assert:
        that:
          - platforms | length > 0
          - platform.name is string and platform.name | length > 0
      loop: '{{ platforms }}'
      loop_control:
        loop_var: platform
        label: "{{ platform.name }}"
  tasks:
    - name: "Create molecule instance(s)."
      community.general.proxmox_kvm:
        state: present
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        node: {{ node }}
        vmid: "9000"
        clone: "template"
        name: "{{ p.name }}"
        pool: molecule
        timeout: 500
      loop: "{{ platforms }}"
      loop_control:
        loop_var: p
        label: "{{ p.name }}"
      register: proxmox_clone

    - name: "Update molecule instance config(s)"
      community.general.proxmox_kvm:
        state: present
        update: true
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        node: {{ node }}
        vmid: "{{ rc.vmid }}"
        cores: 2
        memory: 4096
        timeout: 500
      loop: "{{ proxmox_clone.results }}"
      loop_control:
        loop_var: rc
        label: "{{ rc.p.name, rc.vmid }}"
    #
    - name: "Start molecule instance(s)."
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        node: {{ node }}
        vmid: "{{ rc.vmid }}"
        timeout: 500
        state: started
      loop: "{{ proxmox_clone.results }}"
      loop_control:
        loop_var: rc
        label: "{{ rc.p.name, rc.vmid }}"

    - name: Query for IPs
      ansible.builtin.shell: "qm agent {{ ip.vmid }} network-get-interfaces | jq -r '.[1].\"ip-addresses\"[0].\"ip-address\"'"
      delegate_to: proxmox.host.local
      vars:
        instance: "{{ proxmox_clone.results[index] }}"
      loop: "{{ proxmox_clone.results }}"
      loop_control:
        loop_var: ip
        label: "{{ ip.vmid }}"
      register: instance_ip

    - name: "Populate instance configs."
      ansible.builtin.set_fact:
        instance_config:
          instance: "{{ ra.ip.p.name }}"
          address: "{{ ra.stdout }}"
          user: "root"
          port: 22
          identity_file: "~/.ssh/home_root"
          vmid: "{{ ra.ip.vmid }}"
      loop: "{{ instance_ip.results }}"
      loop_control:
        loop_var: ra
        label: "{{ ra.ip.p.name, ra.ip.vmid }}"
      register: instance_configs

    - name: whats my server
      ansible.builtin.debug:
        var: instance_configs

    - name: Write Molecule instance configs
      copy:
        dest: "{{ molecule_instance_config }}"
        content: >-
            {{ instance_configs.results
               | map(attribute='ansible_facts.instance_config')
               | list
               | to_json
               | from_json
               | to_yaml }}

    - name: make the inventory
      template:
       src: "{{ top_dir }}/testing/template_ansible_inventory.yml"
       dest: "{{ top_dir }}/testing/ansible_inventory.yml"
      vars:
        hosts: "{{ instance_configs.results
           | map(attribute='ansible_facts.instance_config') }}"
